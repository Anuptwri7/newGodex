// Generated by view binder compiler. Do not edit!
package com.godex.sample.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.viewbinding.ViewBindings;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import com.godex.sample.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFrontPlateBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button buttonPrint;

  @NonNull
  public final CheckBox checkBoxShowBorder;

  @NonNull
  public final RelativeLayout containerFront;

  @NonNull
  public final RelativeLayout containerFrontRear;

  @NonNull
  public final EditText editTextDealerInfo;

  @NonNull
  public final EditText editTextNumberPlate;

  @NonNull
  public final Spinner spinnerPlateSize;

  @NonNull
  public final TextView textViewDealerInfo;

  @NonNull
  public final TextView textViewDealerInfoRear;

  @NonNull
  public final TextView textViewLetters;

  @NonNull
  public final TextView textViewLettersRear;

  @NonNull
  public final TextView textViewPlateDimensions;

  private ActivityFrontPlateBinding(@NonNull ScrollView rootView, @NonNull Button buttonPrint,
      @NonNull CheckBox checkBoxShowBorder, @NonNull RelativeLayout containerFront,
      @NonNull RelativeLayout containerFrontRear, @NonNull EditText editTextDealerInfo,
      @NonNull EditText editTextNumberPlate, @NonNull Spinner spinnerPlateSize,
      @NonNull TextView textViewDealerInfo, @NonNull TextView textViewDealerInfoRear,
      @NonNull TextView textViewLetters, @NonNull TextView textViewLettersRear,
      @NonNull TextView textViewPlateDimensions) {
    this.rootView = rootView;
    this.buttonPrint = buttonPrint;
    this.checkBoxShowBorder = checkBoxShowBorder;
    this.containerFront = containerFront;
    this.containerFrontRear = containerFrontRear;
    this.editTextDealerInfo = editTextDealerInfo;
    this.editTextNumberPlate = editTextNumberPlate;
    this.spinnerPlateSize = spinnerPlateSize;
    this.textViewDealerInfo = textViewDealerInfo;
    this.textViewDealerInfoRear = textViewDealerInfoRear;
    this.textViewLetters = textViewLetters;
    this.textViewLettersRear = textViewLettersRear;
    this.textViewPlateDimensions = textViewPlateDimensions;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFrontPlateBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFrontPlateBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_front_plate, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFrontPlateBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonPrint;
      Button buttonPrint = ViewBindings.findChildViewById(rootView, id);
      if (buttonPrint == null) {
        break missingId;
      }

      id = R.id.checkBoxShowBorder;
      CheckBox checkBoxShowBorder = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxShowBorder == null) {
        break missingId;
      }

      id = R.id.containerFront;
      RelativeLayout containerFront = ViewBindings.findChildViewById(rootView, id);
      if (containerFront == null) {
        break missingId;
      }

      id = R.id.containerFrontRear;
      RelativeLayout containerFrontRear = ViewBindings.findChildViewById(rootView, id);
      if (containerFrontRear == null) {
        break missingId;
      }

      id = R.id.editTextDealerInfo;
      EditText editTextDealerInfo = ViewBindings.findChildViewById(rootView, id);
      if (editTextDealerInfo == null) {
        break missingId;
      }

      id = R.id.editTextNumberPlate;
      EditText editTextNumberPlate = ViewBindings.findChildViewById(rootView, id);
      if (editTextNumberPlate == null) {
        break missingId;
      }

      id = R.id.spinnerPlateSize;
      Spinner spinnerPlateSize = ViewBindings.findChildViewById(rootView, id);
      if (spinnerPlateSize == null) {
        break missingId;
      }

      id = R.id.textViewDealerInfo;
      TextView textViewDealerInfo = ViewBindings.findChildViewById(rootView, id);
      if (textViewDealerInfo == null) {
        break missingId;
      }

      id = R.id.textViewDealerInfoRear;
      TextView textViewDealerInfoRear = ViewBindings.findChildViewById(rootView, id);
      if (textViewDealerInfoRear == null) {
        break missingId;
      }

      id = R.id.textViewLetters;
      TextView textViewLetters = ViewBindings.findChildViewById(rootView, id);
      if (textViewLetters == null) {
        break missingId;
      }

      id = R.id.textViewLettersRear;
      TextView textViewLettersRear = ViewBindings.findChildViewById(rootView, id);
      if (textViewLettersRear == null) {
        break missingId;
      }

      id = R.id.textViewPlateDimensions;
      TextView textViewPlateDimensions = ViewBindings.findChildViewById(rootView, id);
      if (textViewPlateDimensions == null) {
        break missingId;
      }

      return new ActivityFrontPlateBinding((ScrollView) rootView, buttonPrint, checkBoxShowBorder,
          containerFront, containerFrontRear, editTextDealerInfo, editTextNumberPlate,
          spinnerPlateSize, textViewDealerInfo, textViewDealerInfoRear, textViewLetters,
          textViewLettersRear, textViewPlateDimensions);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
