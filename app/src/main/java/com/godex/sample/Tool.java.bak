package com.godex.sample;

import android.Manifest;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;
import android.graphics.pdf.PdfRenderer;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.support.v4.app.ActivityCompat;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.godex.Godex;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalTime;
import java.util.Objects;
import java.util.Timer;
import java.util.TimerTask;

public class Tool extends Connect {
	private Button sendButton,
			       disconnectButton,
			       printButton,
				   getDPIButton,
			       settingButton,
			       uploadButton,
				   printPDFButton;
	private Button btnSelectFile,btnSendSelectedFile;
	private ListView mConversationView;
	private EditText mOutEditText;
	private EditText tbDelay,tbFrequency,tbTimes;
	private TextView lbisFileSelected;
	public static ArrayAdapter<String> mConversationArrayAdapter;
	public static String message;
	public String sType; // from Connect.java
	private byte[] fileToSend = null;
	Thread tStatus;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);		
		setContentView(R.layout.tool);
		sType = getIntent().getStringExtra("type"); // read or write

		Godex.debug(3);
		getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);

		mOutEditText = (EditText) findViewById(R.id.edit00);
		tbDelay = findViewById(R.id.tb_Delay);
		tbFrequency = findViewById(R.id.tb_Frequency);
		tbTimes = findViewById(R.id.tb_Times);
		lbisFileSelected = findViewById(R.id.lb_isFileSelected);
		mConversationArrayAdapter = new ArrayAdapter<String>(this, R.layout.message);
		mConversationView = (ListView) findViewById(R.id.in);
		mConversationView.setAdapter(mConversationArrayAdapter);

		sendButton = (Button) findViewById(R.id.send);
		sendButton.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				if(sType.equals("write")) {
					String Message = mOutEditText.getText().toString();
					if ("".equals(mOutEditText.getText().toString().trim()))
						Toast.makeText(getApplicationContext(), "Please enter a command", Toast.LENGTH_SHORT).show();
					else {
						N = Godex.sendCommand(Message);
					}
					if (N == false)
						Toast.makeText(getApplicationContext(), "Send fail", Toast.LENGTH_SHORT).show();
					else {
						Toast.makeText(getApplicationContext(), "Sent", Toast.LENGTH_SHORT).show();
					}
				}

				String[] zText = new String[1];
				if(Godex.read(zText)!=0) {
					message=zText[0];
					Toast.makeText(getApplicationContext(), "you did receive  ", Toast.LENGTH_SHORT).show();
					mConversationArrayAdapter.add(message);
				}
			}
		});

		disconnectButton = (Button) findViewById(R.id.dcnt);
		disconnectButton.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				try {
					N=Godex.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

				if(N==false)
					Toast.makeText(getApplicationContext(), "Disconnect fail", Toast.LENGTH_SHORT).show();
				else {
					WFaddress="";
					BTaddress="";
					Toast.makeText(getApplicationContext(), "Disconnected", Toast.LENGTH_SHORT).show();
					finish();
				}
			}
		});

		getDPIButton = (Button) findViewById(R.id.btGetDPI);
		getDPIButton.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				Toast.makeText(getApplicationContext(), "Printer DPI: "+Godex.getPrinterDPI(), Toast.LENGTH_SHORT).show();
			}
		});

		printButton = (Button) findViewById(R.id.print);
		printButton.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				String fileName = null;
				try {
					String ext = Environment.getExternalStorageDirectory().toString();
					fileName = ext+"/Download/test.png";
				} catch (Exception e) {
					e.printStackTrace();
				}
				//Bitmap myBitmap = BitmapFactory.decodeFile(fileName);
				Godex.setup("50","8","2","1","3","0");
				Godex.sendCommand("^L");
				Godex.Bar_1D(Godex.BarCodeType.Code39,0,0,2,6,80,0, Godex.Readable.Bottom_Left,"1234");
				Godex.Bar_QRCode(0,140,1,1,"M",8,5,0,"12345678");
				Godex.Bar_DataMatrix(0,280,6,"0","1234567890");
				Godex.sendCommand("AD,200,140,1,1,0,0,sendCommand");
				Godex.ecTextOut(200,0, Typeface.DEFAULT,0,50,0,false,false,false,"Test ecTextOut");
				//Godex.putImage(10, 10, myBitmap);
				Godex.sendCommand("E");
			}
		});

		uploadButton = (Button) findViewById(R.id.upload);
		uploadButton.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				if(sType.equals("write")) {
					Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
					Uri uri = Uri.parse("/");
					intent.setDataAndType(uri, "*/*");
					startActivityForResult(Intent.createChooser(intent, "Open folder"),0);
				}else {
					mConversationArrayAdapter.clear();
					Godex.sendCommand("");
				}
			}
		});

		settingButton = (Button) findViewById(R.id.set);
		settingButton.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				Godex.setup("20", "10", "2", "1", "3", "0");
			}
		});

		printPDFButton = findViewById(R.id.printPDF);
		printPDFButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				if (ActivityCompat.checkSelfPermission(Tool.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
					if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
						requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 101);
						return;
					}
				}
				Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
				Uri uri = Uri.parse("/");
				intent.setDataAndType(uri, "application/pdf");
				startActivityForResult(Intent.createChooser(intent, "Open PDF"),1);
			}
		});

		btnSelectFile = (Button) findViewById(R.id.btn_SelectFile);
		btnSelectFile.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				if (ActivityCompat.checkSelfPermission(Tool.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
					if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
						requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 101);
						return;
					}
				}
				if(sType.equals("write")) {
					Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
					Uri uri = Uri.parse("/");
					intent.setDataAndType(uri, "*/*");
					startActivityForResult(Intent.createChooser(intent, "Open folder"),2);
				}else {
					mConversationArrayAdapter.clear();
				}
			}
		});

		btnSendSelectedFile = (Button) findViewById(R.id.btn_SendSelectedFile);
		btnSendSelectedFile.setOnClickListener( new OnClickListener() {
			public void onClick(View v) {
				// 再加入重複傳送、傳送間隔
				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
					Log.d("BLE Write TEST","Start "+ LocalTime.now());
				}
				try {
					final boolean[] bTaskSending = {true};
					Godex.resetBLEDataSent();
					Handler handler = new Handler(msg -> {
						String s = (String)msg.obj;
						// 在Thread結束工作後:
						Toast.makeText(getApplicationContext(), "Sending Task Finished", Toast.LENGTH_LONG).show();
						if (s!=null && !s.isEmpty()) {
							AlertDialog.Builder alertDialog = new AlertDialog.Builder(Tool.this);
							alertDialog.setTitle("Send Error");
							alertDialog.setMessage(s);
							alertDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog, int which) {
								}
							});
							alertDialog.setCancelable(false);
							alertDialog.show();
						}
						return false;
					});

					if (fileToSend == null) {
						Toast.makeText(Tool.this, "請選擇檔案", Toast.LENGTH_SHORT).show();
						return;
					}
					Loading loading = new Loading(Tool.this);
					loading.showDialog();

					Thread tRefresh = new Thread(() -> {
						while (bTaskSending[0]){
							runOnUiThread(new Runnable() {
								@Override
								public void run() {
									loading.setLoadingText2("Data Sent..."+Godex.getBLEDataSent());
								}
							});
							try {
								Thread.sleep(200);
							} catch (Exception ignored) {

							}
						}
						runOnUiThread(new Runnable() {
							@Override
							public void run() {
								loading.setLoadingText2("Data Sent..."+Godex.getBLEDataSent());
							}
						});
					});
					tRefresh.start();
					Thread t = new Thread(() -> {
						// 開一個Thread來工作，避免卡住Main執行序
						Message msg = Message.obtain();
						msg.obj = "";
						int times = 1;
						if (!Objects.equals(tbTimes.getText().toString(), ""))
							times = Integer.parseInt(tbTimes.getText().toString());
						int delay = 0;
						if (!Objects.equals(tbDelay.getText().toString(), ""))
							delay = Integer.parseInt(tbDelay.getText().toString());
						for (int i = 0; i < times; i++) {// 重複傳送
							//Godex.writeByte(fileToSend, delay);
							int finalI = i;
							int finalTimes = times;
							runOnUiThread(new Runnable() {
								@Override
								public void run() {
									loading.setLoadingText("Sending...("+String.valueOf(finalI +1)+"/"+ finalTimes +")");
								}
							});
							boolean b = Godex.writeByte(fileToSend, delay);
							if (!b){
								msg.obj += "Task " + String.valueOf(i)+" Error\n";
							}
							// 傳送完一份休息一下
							if (!Objects.equals(tbFrequency.getText().toString(), "")) {
								int sleep = Integer.parseInt(tbFrequency.getText().toString());
								try {
									Thread.sleep((long) sleep);
								} catch (Exception ignored) {}
							}
						}
						handler.sendMessage(msg); // 告知Handler已結束工作
						bTaskSending[0] = false;
						runOnUiThread(new Runnable() {
							@Override
							public void run() {
								loading.setLoadingText("Sending...Finish");
								loading.setProgressBar(false);
								loading.setCancelBtn(true);
							}
						});
						//loading.closeDialog();
					});
					t.start();
				}
				catch (Exception ignore){

				}
				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
					Log.d("BLE Write TEST","End "+ LocalTime.now());
				}
			}
		});
		TextView lb_Status = findViewById(R.id.lb_isBLEConnected);
		tStatus = new Thread(() -> {
			Log.d("[BLE Status]","Start Monitoring");
			while (true){
				runOnUiThread(new Runnable() {
					@Override
					public void run() {
						String s = "Connection:" + Godex.getBLEStatus() + "\r\nBuffer available:" + Godex.getBLEThroughputStatus() +
								"\r\nHandshake String: " + Godex.getBLEBufAvaString();
						lb_Status.setText(s);
					}
				});
				try {
					Thread.sleep(1);
				} catch (Exception ignored) {

				}
			}
		});
		tStatus.start();
		if(sType.equals("read"))
		{
			settingButton.setVisibility(View.INVISIBLE);
			printPDFButton.setVisibility(View.INVISIBLE);
			sendButton.setText("Read");
			printButton.setVisibility(View.INVISIBLE);
			getDPIButton.setVisibility(View.INVISIBLE);
			settingButton.setVisibility(View.INVISIBLE);
			uploadButton.setText("Clear");
			mOutEditText.setVisibility(View.INVISIBLE);
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		try {
			String filePath = getFileName(data);

			switch (requestCode) {
				case 0: // for sending test only(send all data of the file)
					FileInputStream input = new FileInputStream(filePath);

					byte[] temp = new byte[1024];
					ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
					int len = 0;
					while ((len = input.read(temp)) > 0) {
						outputStream.write(temp, 0, len);
					}
					int delay = 0;
					if (!Objects.equals(tbDelay.getText().toString(), "")) delay = Integer.parseInt(tbDelay.getText().toString());
					fileToSend = outputStream.toByteArray();
					Godex.writeByte(fileToSend, delay);
					Godex.sendCommand("\r\n");
					break;

				case 1: // for print PDF
					if(true){
						Godex.printPDF(filePath,203,0,50,0, Godex.ImageDithering.None);
						String[] zText = new String[1];
						if(Godex.read(zText)!=0) {
							message=zText[0];
							Toast.makeText(getApplicationContext(), "you did receive  ", Toast.LENGTH_SHORT).show();
							mConversationArrayAdapter.add(message);
						}
						//Godex.printPDF(filePath,1,1,203,180,50,0, Godex.ImageDithering.Diffusion);
					}
					break;
					//PdfRenderer renderer;
					//if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
					//	ParcelFileDescriptor file0 = ParcelFileDescriptor.open(new File(filePath),ParcelFileDescriptor.MODE_READ_ONLY);
					//	renderer = new PdfRenderer(file0);
//
					//	//render pages
					//	final int pageCount = renderer.getPageCount();
					//	// print page i
					//	for (int i = 0; i < pageCount; i++) {
					//		PdfRenderer.Page page = renderer.openPage(i);
//
					//		// create bitmap size according to page size
					//		Bitmap mBitmapOrg = Bitmap.createBitmap(page.getWidth(), page.getHeight(), Bitmap.Config.ARGB_4444);
					//		page.render(mBitmapOrg, null, null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);
					//		double factor = 60 * 200 / (page.getWidth()*25.4);
					//		Bitmap mBitmap = Bitmap.createScaledBitmap(mBitmapOrg, (int) (page.getWidth()*factor),(int) (page.getHeight()*factor),false);
					//		// print
					//		Godex.sendCommand("^L");
					//		Godex.putImage(0,0, mBitmap, Godex.ImageDithering.Diffusion, false);
					//		Godex.sendCommand("E");
//
					//		page.close();
					//	}
					//	renderer.close();
					//}
					//break;
				case 2: // for get file
					Uri uri = data.getData();
					InputStream inputStream = getContentResolver().openInputStream(uri);
					temp = new byte[750];
					outputStream = new ByteArrayOutputStream();
					len = 0;
					while ((len = inputStream.read(temp)) > 0) {
						outputStream.write(temp, 0, len);
					}
					fileToSend = outputStream.toByteArray();
					lbisFileSelected.setText(String.valueOf(fileToSend.length));
					inputStream.close();
					break;
			}
		} catch (Exception e) {
			AlertDialog.Builder alertDialog = new AlertDialog.Builder(Tool.this);
			alertDialog.setTitle("Exception");
			alertDialog.setMessage(e.getMessage());
			alertDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
				}
			});

			alertDialog.setCancelable(false);
			alertDialog.show();
		}
	}

	private String getFileName(Intent data){
		String filePath = "";
		if (Build.VERSION.SDK_INT >= 19){
			Uri uri=data.getData();
			final String authority = uri.getAuthority();
			if ("com.android.externalstorage.documents".equals(authority)) {
				// 外部儲存空間
				final String docId = DocumentsContract.getDocumentId(uri);
				final String[] divide = docId.split(":");
				final String type = divide[0];
				if ("primary".equals(type)) {
					filePath = Environment.getExternalStorageDirectory().getAbsolutePath().concat("/").concat(divide[1]);
				} else {
					filePath = "/storage/".concat(type).concat("/").concat(divide[1]);
				}
			}
			else if ("com.android.providers.downloads.documents".equals(authority)) {
				// 下載目錄
				final String docId = DocumentsContract.getDocumentId(uri);
				if (docId.startsWith("raw:")) {
					filePath = docId.replaceFirst("raw:", "");
				}
			}
		}
		else{
			filePath = data.getData().getPath().split("raw:")[1];
		}
		return filePath;
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
	    super.onConfigurationChanged(newConfig);
	 
	    // Checks the orientation of the screen
	    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
	        Toast.makeText(this, "landscape", Toast.LENGTH_SHORT).show();
	    } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
	        Toast.makeText(this, "portrait", Toast.LENGTH_SHORT).show();
	    }
	}

	@Override
	public void onRestoreInstanceState(Bundle savedInstanceState) {
		super.onRestoreInstanceState(savedInstanceState);
	}

	@Override
	public void onRestart() {
		super.onRestart();
	}

	@Override
	public void onStart() {
		super.onStart();
	}

	@Override
	public void onResume() {
		super.onResume();
	}

	@Override
	public void onSaveInstanceState(Bundle savedInstanceState) {
		super.onSaveInstanceState(savedInstanceState);
	}

	@Override
	public void onPause() {
		super.onPause();
	}

	@Override
	public void onStop() {
		super.onStop();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		tStatus.interrupt();
		Log.d("[BLE Status]","End Monitoring");
		try {
			N=Godex.close();
		} catch (Exception ignored) {
		}
	}
}